---
- name: Install and configure container host(s)
  hosts: all
  become: false


  vars:
    time_zone: "Europe/Budapest"

    system_services:
      - "firewalld"

    firewall_allowed_ports:
      - "22/tcp"
      - "80/tcp"
      - "443/tcp"

    packages_install_dnf:
      - bind-utils        # Debug DNS
      - net-tools         # Debug network, eg ping
      - nc                # Debug network, tcp
      - nmap              # Debug network, scan
      - ntpstat           # Debug NTP
      - jq                # JSON processing
#      - pwgen             # Security: password generation
      - tree              # File system utility
      - git               # Checkout postgres-backup repo for local build
      - rsync             # Ansible needs for ansible.posix.synchronize
      - podman            # Podman engine
      - podman-compose    # Podman compose (EPEL)
      - container-tools   # Buildah, Skopeo, CRIU (snapshot container state to disk), Udica (selinux policy generator for containers)

    # Docker "stack"-s
    container_projects:
      # - lampstack-prod
      - zabbix-sbx

  tasks:
    - name: "Populate facts"
      become: true
      ansible.builtin.service_facts:

    - name: "Set timezone"
      become: true
      community.general.timezone:
        name: "{{ time_zone }}"

    - name: Set hostname to inventory hostname
      become: true
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Enable EPEL repository
      become: true
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: "Install packages"
      become: true
      ansible.builtin.dnf:
        name: "{{ packages_install_dnf }}"
        state: present

    - name: "Enable and start services"
      become: true
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: true
        state: started
      with_items: "{{ system_services }}"

    - name: "Set up host firewall"
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: true
      with_items: "{{ firewall_allowed_ports }}"
      notify: "Restart firewalld"

    - name: "Copy container project files"
      # https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html#parameters
      ansible.posix.synchronize:
        mode: push
        src: container-projects
        dest: "/home/{{ ansible_user }}"
        # delete: true
        recursive: true

### Local build of postgres-backup container
    - name: Git checkout "postgres-backup" project
      # noqa: latest
      ansible.builtin.git:
        repo: 'https://github.com/szpeter80/misc.git'
        dest: /home/{{ ansible_user }}/container-projects/zabbix-sbx/900-postgresql/postgres-backup/repo


    - name: Build "postgres-backup" image
      containers.podman.podman_image:
        name: local/postgresql-backup:latest
        path: /home/{{ ansible_user }}/container-projects/zabbix-sbx/900-postgresql/postgres-backup/repo/containers/pg-backup
        build:
          # cache: false
          rm: true
          format: oci
          annotation:
            info: "Locally built image"

### Systemd integration
    - name: Enable linger for container service user
      become: true
      ansible.builtin.command:
        cmd: "loginctl enable-linger {{ ansible_user }}"
        creates: "/var/lib/systemd/linger/{{ ansible_user }}"

    - name: Generate per-project systemd unit files
      become: true
      ansible.builtin.template:
        src: ansible-templates/podman_compose_systemd_unit.j2
        dest: /etc/systemd/user/podman--{{ item }}.service
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      with_items: "{{ container_projects }}"

#    - name: Start projects as user systemd units
#      ansible.builtin.systemd_service:
#        scope: user
#        name: "podman-compose@{{ item }}"
#        enabled: true
#        state: started
#      with_items: "{{ container_projects }}"

###############################################################################
### Handlers
###############################################################################

  handlers:
    - name: "Reboot the machine"
      become: true
      ansible.builtin.reboot:

    - name: "Restart firewalld"
      become: true
      ansible.builtin.systemd:
        name: firewalld
        state: restarted

    - name: "Restart systemd"
      become: true
      ansible.builtin.systemd:
        daemon-reload: true

### TODO: https://gist.github.com/szpeter80/41dae240abad385e75b6abddf89e3ed2
