---
- name: Install and configure container host(s)
  hosts: all
  become: true


  vars:
    time_zone: "Europe/Budapest"

    system_services:
      - "firewalld"

    firewall_allowed_ports:
      - "22/tcp"
      - "80/tcp"
      - "443/tcp"

    packages_install_dnf:
      - bind-utils        # Debug DNS
      - net-tools         # Debug network, eg ping
      - nc                # Debug network, tcp
      - nmap              # Debug network, scan
      - ntpstat           # Debug NTP
      - jq                # JSON processing
#      - pwgen             # Security: password generation
      - tree              # File system utility
      - git               # Checkout postgres-backup repo for local build
      - rsync             # Ansible needs for ansible.posix.synchronize
      - podman            # Podman engine
      - podman-compose    # Podman compose (EPEL)
      - container-tools   # Buildah, Skopeo, CRIU (snapshot container state to disk), Udica (selinux policy generator for containers)

    # Docker "stack"-s
    container_projects:
      # - lampstack-prod
      - zabbix-sbx

  tasks:
    - name: "Populate facts"
      ansible.builtin.service_facts:

    - name: "Set timezone"
      community.general.timezone:
        name: "{{ time_zone }}"

    - name: Set hostname to inventory hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Enable EPEL repository
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: "Install packages"
      ansible.builtin.dnf:
        name: "{{ packages_install_dnf }}"
        state: present

    - name: "Enable and start services"
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: true
        state: started
      with_items: "{{ system_services }}"

    - name: "Set up host firewall"
      ansible.posix.firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: true
      with_items: "{{ firewall_allowed_ports }}"
      notify: "Restart firewalld"

    - name: "Copy container project files"
      # https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html#parameters
      ansible.posix.synchronize:
        mode: push
        src: container-projects
        dest: "~"
        # delete: true
        recursive: true

### Local build of postgres-backup container
    - name: Git checkout "postgres-backup" project
      # noqa: latest
      ansible.builtin.git:
        repo: 'https://github.com/szpeter80/misc.git'
        dest: /home/{{ ansible_user }}/container-projects/zabbix-sbx/900-postgresql/postgres-backup/repo

### TODO: podman build --tag local/postgresql-backup:latest .

### podman-compose systemd magic
### https://github.com/containers/podman-compose/blob/f6dbce36181c44d0d08b6f4ca166508542875ce1/podman_compose.py#L1817-L1896

    - name: Check if podman-compose Systemd unit exists
      ansible.builtin.stat:
        path: /etc/systemd/user/podman-compose@.service
      register: podman_compose_systemd_unit_file

    # Create Podman unit once, later projects / stacks can be registered individually
    - name: Create podman-compose Systemd unit
      ansible.builtin.command:
        cmd: podman-compose systemd --action create-unit
      register: result
      changed_when: result.rc == 0
      failed_when: result.rc != 0
      when: not podman_compose_systemd_unit_file.stat.exists


    # Register projects to podman-compose systemd
    - name: Register project / stack to  podman-compose systemd
      ansible.builtin.command:
        cmd: podman-compose systemd --action register
      args:
        chdir: "/home/{{ ansible_user }}/container-projects/{{ item }}"
      changed_when: result.rc == 0
      failed_when: result.rc != 0
      with_items: "{{ container_projects }}"

###############################################################################
### Handlers
###############################################################################

  handlers:
    - name: "Reboot the machine"
      ansible.builtin.reboot:

    - name: "Restart firewalld"
      ansible.builtin.systemd:
        name: firewalld
        state: restarted

    - name: "Restart systemd"
      ansible.builtin.systemd:
        daemon-reload: true

### TODO: https://gist.github.com/szpeter80/41dae240abad385e75b6abddf89e3ed2
